"""
Created on Fri Feb  7 13:38:47 2020

@author: Avinash.Kumar
"""

'''
Model creation and generating the scores for our model.
'''
import torch
from recommendation.modelbuilding.restrictedboltzmannmachine.Model import Model
from recommendation.modelbuilding.restrictedboltzmannmachine import RecommenderEvaluator

'''
Test model creation
'''
def testing(trainData, testData, numberOfVisible, numberOfHidden, step, batchSize, numEpoch, learningRate, numberOfUsers):
    '''
    Parameters
    ----------
    trainData : Training for model creation.
    testData : Test data for model creation.
    numberOfVisible : Number of visible nodes for the final model.
    numberOfHidden : Number of hidden nodes for the final model.
    step : Learning step of the final model.
    batchSize : Batch size of the final model.
    numEpoch : Number of epochs of the final model.
    learningRate : Learning rate of the final model.
    numberOfUsers : Number of users.

    Returns
    -------
    topPrediction : Top 100 prediction from test data.
    topKValues : Probability of top 100 predictions from the training data.
    '''
    print('Testing the Model.')
    rbm_test = Model(numberOfVisible, numberOfHidden, step, batchSize, numEpoch, learningRate)
    # getting the top n predictions
    _,_,_,_,bestEpoch,_,probabilityTest = rbm_test.fit(trainData, testData, numberOfUsers)
    probabilityTest = [t.numpy() for t in probabilityTest]
    probabilityTest = torch.FloatTensor(probabilityTest)
    '''
    Top 100 recommendation for the test data.
    '''
    topKValues, topPrediction = torch.topk(probabilityTest, k=100, dim=-1, largest=True)
    topPrediction = torch.reshape(topPrediction, (numberOfUsers+1, 100))
    topKValues = torch.reshape(topKValues, (numberOfUsers+1, 100))
    return topPrediction, topKValues, bestEpoch

'''
Printing the scores for the recommendations generated by the Restricted boltzmann machine model.
'''
def test_score(topPrediction, topKValues, rankdict):
    print('Printing the Scores')
    print('The value of Coverage: '+ str(RecommenderEvaluator.UserCoverage(topPrediction, topKValues, 0.6)))
    print('The value of Novelty: '+ str(RecommenderEvaluator.Novelty(topPrediction, rankdict)))
    #print('The value of Personalization: ' + str(RecommenderEvaluator.Personalization(topPrediction)))

'''
Training the model for the complete dataset and
saving the model.
'''
def training(data, numberOfVisible, numberOfHidden, step, batchSize, numEpoch, learningRate, numberOfUsers):
    print('Creating an object of class Model for the complete data')
    rbm = Model(numberOfVisible,numberOfHidden,step,batchSize,numEpoch,learningRate) 
    print('I am Training rbm_model')
    rbm.train(data,numberOfUsers)
    return rbm