"""
Created on Fri Feb  7 10:53:31 2020

@author: Avinash.Kumar
"""

'''
Evaluating the recommendations generated by the model.
'''
import numpy as np
from sklearn.metrics.pairwise import cosine_similarity

'''
UserCoverage : Coverage gives a score of the probablity of users having atleasst one good recommendation.
                The higher the value better it is.
'''
def UserCoverage(topNPredicted, probTopNPredicted,ratingThreshold):
    '''
    Parameters
    ----------
    topNPredicted : Top N predictions from the model.
    probTopNPredicted : Probability of the top N predictions from the model.
    ratingThreshold : Rating threshold for calculation of the threshold.

    Returns
    -------
    The coverage score of the model.
    '''
    hits = 0
    numUsers = len(topNPredicted)
    for userID in range(numUsers):
        hit = False
        for courseID in topNPredicted[userID]:
            for predictedRating in probTopNPredicted[userID]:
                if (predictedRating >= ratingThreshold):
                    hit = True
                    break
        if (hit):
            hits += 1
    return hits / numUsers

'''
Novelty : Novelty gives a score of how popular are the recommendation by the model.
           The higher the value better it is.
'''
def Novelty(topNPredicted, rankings):
    '''
    Parameters
    ----------
    topNPredicted : Top N predictions from the model.
    rankings : A dictionary of ranking of courses of the dataset.

    Returns
    -------
    The Novelty score of the model.
    '''
    n = 0
    total = 0
    numUsers = len(topNPredicted)
    for userID in range(numUsers):
        for courseID in topNPredicted[userID]:
            rank = rankings[int(courseID)]
            total += rank
            n += 1
    return total / n

'''
Personalization : Personalization score indicates users recommendations are different, meaning
                  the Model is offering a personalised experience to each user.
'''
def Personalization(topNPredicted):
    '''
    Parameters
    ----------
    topNPredicted : Top N predictions from the model.

    Returns
    -------
    The Personalization score of the model.
    '''
    sim_prediction = np.unique(topNPredicted)
    personalize = []
    for user in range(len(topNPredicted)):
        ls = np.zeros(len(sim_prediction))
        for idx,value in enumerate(sim_prediction):
            if value in topNPredicted[user]:
                ls[idx] = 1
        personalize.append(list(ls))
    personalize = np.asarray(personalize)
    sim_mat = cosine_similarity(personalize,personalize)
    tri_mat = np.tril(sim_mat,-1)
    avg_sim_mat = tri_mat[np.nonzero(tri_mat)]
    return 1 - (sum(avg_sim_mat)/len(avg_sim_mat))
